install.packages("rmarkdown")
install.packages("rmarkdown")
y <- x^2 + x + 1
y <- expression(x^2 + x + 1)
x <- 2
eval(y)
z <- D(y,'x')
eval(z)
y <- expression(x^2 + x + 1)
x <- 2
eval(y)
z <- D(y,'x')
eval(z)
eval(z=0)
uniroot(z,interval = c(-100,100))
uniroot(f=z,interval = c(-100,100))
y <- function(x){(x^2 + x + 1)}
x <- 2
eval(y)
y(x)
uniroot(y,interval = c(-100,100))
y <- function(x){(x^2 + x - 1)}
uniroot(y,interval = c(-100,100))
(y,interval = c(-100,100),x=c(-100,100))
uniroot(y,interval = c(-100,100))
y <- expression(x^2 + x - 1)
solve(y,0)
solve(a,0)
a <- c(-1,4)
solve(a,0)
polyroot(a)
roots <- polyroot(a)
type(roots)
attr(roots)
attributes(roots)
typeof(roots)
plot(y)
y <- function(x){(x^2 + x - 1)}
y
plot(y)
plot(y,ylim=c(-10,10))
plot(y,xlim=c(-10,10))
y <- function(x){(3 - x + 2*(x^2))}
plot(y,xlim=c(-10,10))
plot(y,xlim=c(-4,4))
minor.tick(nx=4,tick.ratio=0.5)
plot(x=0.25,add=TRUE)
plot(x=0.25,y=c(0,y(0.25)),add=TRUE)
y <- function(x){(3 - x + 2*(x^2))}
z <- function(x){(3 - x + 2*(x^2))}
b <- z(0.25)
plot(y,xlim=c(-4,4))
plot(x=0.25,y=c(0,b),add=TRUE)
plot(x=c(0.25,0.25),y=c(0,b),add=TRUE)
plot(y,xlim=c(-4,4))
plot(x=c(0.25,0.25),y=c(0,b),update=TRUE)
z <- function(x){(3 - x + 2*(x^2))}
b <- z(0.25)
plot(y,xlim=c(-4,4))
plot(x=c(0.25,0.25),y=c(0,b),add=TRUE)
plot(y,xlim=c(-4,4),add=TRUE)
plot(x=c(0.25,0.25),y=c(0,b),add=TRUE)
plot(y,xlim=c(-4,4),ylim(0,30),add=TRUE)
plot(y,xlim=c(-4,4),ylim=c(0,30),add=TRUE)
plot(x=c(0.25,0.25),y=c(0,b),add=TRUE)
plot(y,xlim=c(-4,4),ylim=c(0,30),add=TRUE)
plot(x=c(0.25,0.25),y=c(0,b),add=TRUE)
plot(y,xlim=c(-4,4),ylim=c(0,30),add=TRUE)
plot(x=c(0.25,0.25),y=c(0,b))
abline(a=0.25)
abline(a=0.25,b=NULL)
abline(v=0.25)
abline(h=b)
abline(v=0)
abline(h=0)
points(x=0.25,y=b)
z <- function(x){(3 - x + 2*(x^2))}
b <- z(0.25)
plot(y,xlim=c(-4,4),ylim=c(0,30),add=TRUE)
points(x=0.25,y=b)
abline(v=0)
abline(h=0)
y <- expression(e^((-6*x)+2))
y_prime <- D(y,'x')
print(y_prime)
a <- 1:15
b <- 16:30
for(i in 1:length(a)){
sum_product <- a[i]*b[i]
}
sum_product
product_sum <- sum(a)*sum(b)
product_sum
mu <- 50
t <- rnorm(100,mean=mu,sd=10)
plot(t)
mu <- 50
t <- dnorm(100,mean=mu,sd=10)
plot(t)
mu <- 50
vect <- 1:100
t <- dnorm(vect,mean=mu,sd=10)
plot(t)
mu <- 50
vect <- 1:100
t <- dnorm(vect,mean=mu,sd=10)
plot(t)
m <- dnorm(vect,mean=(mu-12),sd=10)
plot(m)
mu <- 50
vect <- 1:100
t <- dnorm(vect,mean=mu,sd=10)
plot(t)
m <- dnorm(vect,mean=(mu-12),sd=10)
plot(m.add=TRUE)
mu <- 50
vect <- 1:100
t <- dnorm(vect,mean=mu,sd=10)
plot(t,add=TRUE)
m <- dnorm(vect,mean=(mu-12),sd=10)
plot(m)
mu <- 50
vect <- 1:100
t <- dnorm(vect,mean=mu,sd=10)
plot(t)
m <- dnorm(vect,mean=(mu-12),sd=10)
plot(m,add=TRUE)
t <- dnorm(vect,mean=mu,sd=10)
plot(t);par(new=TRUE)
m <- dnorm(vect,mean=(mu-12),sd=10)
plot(m)
t <- dnorm(vect,mean=mu,sd=10)
mu <- 50
vect <- 1:100
t <- dnorm(vect,mean=mu,sd=10)
plot(t,col='green');par(new=TRUE)
m <- dnorm(vect,mean=(mu-12),sd=10)
plot(m,col='red')
plot(m,col='green',type = "p")
plot(m,col='green',type = 19)
mu <- 50
vect <- 1:100
t <- dnorm(vect,mean=mu,sd=10)
plot(t,col='blue');par(new=TRUE)
m <- dnorm(vect,mean=(mu-12),sd=10)
plot(m,col='green',type = 19)
plot(m,col='green',pch=19)
plot(t,col='blue',pch=15);par(new=TRUE)
plot(m,col='green',pch=19)
legend(x=t,y=m)
legend(x=t,y=m,legend = c("Y Distribution","R Distribution"))
lines(m,col'green',pch=18)
lines(m,col='green',pch=18)
plot(t,col='blue',pch=15);par(new=TRUE)
lines(m,col='green',pch=18)
points(m,col='green',pch=18)
legend(x=t,y=m,legend = c("Y Distribution","R Distribution"))
legend(2,4,legend = c("Y Distribution","R Distribution"))
plot(t,col='blue',pch=15);par(new=TRUE)
points(m,col='green',pch=18)
legend(2,4,legend = c("Y Distribution","R Distribution"))
legend(x=topleft,legend = c("Y Distribution","R Distribution"))
legend(x="topleft",legend = c("Y Distribution","R Distribution"))
legend(x="topleft",legend = c("Y Distribution","R Distribution"),fill=c('blue','green'))
legend(x="topright",legend = c("Y Distribution","R Distribution"),fill=c('blue','green'))
plot(t,col='blue',pch=15);par(new=TRUE)
points(m,col='green',pch=18)
legend(x="topright",legend = c("Y Distribution","R Distribution"),fill=c('blue','green'))
mu <- 50
sig <- 10
vect <- 1:100
t <- dnorm(vect,mean=mu,sd=sig)
m <- dnorm(vect,mean=0,sd=1)
plot(t,col='blue',pch=15);par(new=TRUE)
points(m,col="red",pch=18)
legend(x="topright",legend = c("Z Distribution","Q Distribution"),fill=c('blue','red'))
mu <- 50
sig <- 10
zvect <- 1:100
qvect <- (zvect-mu)/sig
t <- dnorm(zvect,mean=mu,sd=sig)
m <- dnorm(qvect,mean=0,sd=1)
plot(t,col='blue',pch=15);par(new=TRUE)
points(m,col="red",pch=18)
legend(x="topright",legend = c("Z Distribution","Q Distribution"),fill=c('blue','red'))
plot(t,col='blue',pch=15);par(new=TRUE,ylim=.5)
plot(t,col='blue',pch=15);par(new=TRUE,ylab=.5)
axis(2,labels=0.5)
mu <- 50
sig <- 10
zvect <- 1:100
qvect <- (zvect-mu)/sig
t <- dnorm(zvect,mean=mu,sd=sig)
m <- dnorm(qvect,mean=0,sd=1)
plot(t,col='blue',pch=15);par(new=TRUE,ylab=.5)
points(m,col="red",pch=18)
axis(2,labels=0.5)
axis(2,at=0.01,labels=0.5)
ylim(.5)
mu <- 50
sig <- 10
zvect <- 1:100
qvect <- (zvect-mu)/sig
t <- dnorm(zvect,mean=mu,sd=sig)
m <- dnorm(qvect,mean=0,sd=1)
plot(t,col='blue',pch=15)
points(m,col="red",pch=18)
ylim(.5)
plot(t,col='blue',pch=15,ylim=0.25)
plot(t,col='blue',pch=15,ylim=c(0,0.25))
points(m,col="red",pch=18)
plot(t,col='blue',pch=15,ylim=c(0,0.5))
legend(x="topright",legend = c("Z Distribution","Q Distribution"),fill=c('blue','red'))
plot(t,col='blue',pch=15,ylim=c(0,0.5))
points(m,col="red",pch=18)
legend(x="topright",legend = c("Z Distribution","Q Distribution"),fill=c('blue','red'))
#(a) Install/Load packages
#install.packages("tidyverse")
library(tidyverse)
#(a) Install/Load packages
install.packages("tidyverse")
library(tidyverse)
install.packages("vtable")
library(vtable)
# Above code only requires that the install.packages() functions be removed from
# comment status to be run for the first time (user should delete the leading '#')
#(b) Sets the file paths for data, scripts, and tables and figures
datapath <- "F:\Users\Devan\Documents\Education\ECO530\Assignments\Assignment 1\data"
#(a) Install/Load packages
#install.packages("tidyverse")
library(tidyverse)
#install.packages("vtable")
library(vtable)
# Above code only requires that the install.packages() functions be removed from
# comment status to be run for the first time (user should delete the leading '#')
#(b) Sets the file paths for data, scripts, and tables and figures
datapath <- "F:/Users/Devan/Documents/Education/ECO530/Assignments/Assignment 1/data"
scriptpath <- "F:/Users/Devan/Documents/Education/ECO530/Assignments/Assignment 1/scripts"
tablesfigurespath <- "F:/Users/Devan/Documents/Education/ECO530/Assignments/Assignment 1/tables and figures"
#(c) Sets the working directory to the data folder
setwd(datapath)
# Reads the csv file name 'cars' in the datapath folder and stores the data into a
# new data frame name cars.data
cars.data <- read.csv("cars.csv",header=TRUE)
#(d) Creates a summary table of the cars.data data frame
st(cars.data)
summary.data <- cars.data %>%
group_by(foreign) %>%
summarize("Avg. MPG" = round(mean(mpg),digits=1),
"Avg. Weight" = round(mean(weight),digits=0),
"Avg. Price" = round(mean(price),digits=2))
View(summary.data)
#(b)
kable(summary.data)
summ.plot <- kable(summary.data)
plot(summ.plot)
View(cars.data)
#(c) Creates a new data frame named domestic.cars with only information from cars.data
# on domesticly manufactured cars.
domestic.cars <- cars.data[cars.data$foreign=="Domestic"]
#(c) Creates a new data frame named domestic.cars with only information from cars.data
# on domesticly manufactured cars.
domestic.cars <- cars.data[,cars.data$foreign=="Domestic"]
#(c) Creates a new data frame named domestic.cars with only information from cars.data
# on domesticly manufactured cars.
domestic.cars <- cars.data[cars.data$foreign=="Domestic",]
View(domestic.cars)
#(d) Adds a column to the domestic.cars data frame that contains the value of
# that car's price divided by its mpg rating.
domestic.cars %>% mutate(pricepermpg = price/mpg)
#(d) Adds a column to the domestic.cars data frame that contains the value of
# that car's price divided by its mpg rating.
domestic.cars$pricepermpg <-  domestic.cars %>% mutate(pricepermpg = round(price/mpg,digits=1)
View(domestic.cars)
#(d) Adds a column to the domestic.cars data frame that contains the value of
# that car's price divided by its mpg rating.
domestic.cars<-  domestic.cars %>% mutate(pricepermpg = round(price/mpg,digits=1))
View(domestic.cars)
# Creates var1, var2, and var3. Performs 250 draws from a normal distribution
# based on the mean and standard deviation provided
var1 <- rnorm(250,mean=3,sd=1)
var2 <- rnorm(250,mean=-1,sd=2)
var3 <- rnorm(250,mean=2,sd=3)
# Creates the 'random.draws' data frame by combining the vectors var1, var2, and var3
random.draws <- data.frame(var1,var2,var3)
# Creates var1, var2, and var3. Performs 250 draws from a normal distribution
# based on the mean and standard deviation provided
var1 <- rnorm(250,mean=3,sd=1)
var2 <- rnorm(250,mean=-1,sd=2)
var3 <- rnorm(250,mean=2,sd=3)
# Creates the id variable for later use
id <- 1:250
# Creates the 'random.draws' data frame by combining the vectors var1, var2, and var3
random.draws <- data.frame(id,var1,var2,var3)
View(random.draws)
#-------------------------------------------------------------------------------
# R4
#-------------------------------------------------------------------------------
plot(random.draws$var1,pch=20,xlab = "Draw",ylab="Value")
#-------------------------------------------------------------------------------
# R4
#-------------------------------------------------------------------------------
plot(random.draws$var1,pch=20,xlab = "Draw",ylab="Value",title="Results of Random Draws of mean = 3, SD = 1")
#-------------------------------------------------------------------------------
# R4
#-------------------------------------------------------------------------------
plot(random.draws$var1,pch=20,xlab = "Draw",ylab="Value",main="Results of Random Draws of mean = 3, SD = 1")
# Creates a scatter plot of var1 with dots, chart title, and axis labels
plot(random.draws$var1,pch=20,xlab = "Draw",ylab="Value",main="Results of Random Draws of mean = 3, SD = 1")
# Creates a scatter plot of var1 with dots, chart title, and axis labels
plot(random.draws$var1,xlab = "Draw",ylab="Value",main="Results of Random Draws of mean = 3, SD = 1")
plot1 <- ggplot(data=random.draws, aes(x=id,y=var1)) +
geom_point() +
labs(x="Draw",
y= "Value",
title ="Random Draws of Mean = 3, SD = 1")
plot1
dens <- ggplot(data=random.draws, aes(x=var2)) +
geom_density() +
labs(x="Var2",
title ="Density Plot of Var2")
# Displays the plot
dens
# Creates a density plot of var2 with a craaaazy custom color (not default)
dens <- ggplot(data=random.draws, aes(x=var2)) +
geom_density(fill="#ff38fc") +
labs(x="Var2",
title ="Density Plot of Var2")
# Displays the plot
dens
dens <- ggplot(data=random.draws, aes(x=var2)) +
geom_density(fill="#ff38fc",color="#ff38fc") +
labs(x="Var2",
title ="Density Plot of Var2")
# Displays the plot
dens
# Creates a density plot of var2 with a craaaazy custom color (not default)
dens <- ggplot(data=random.draws, aes(x=var2)) +
geom_density(fill="#ff38fc",color="#ff38fc") +
labs(x="Var2",
title ="Density Plot of Var2")
# Displays the plot
dens
# Displays the plot
dens
random.draws <- random.draws %>% mutate(var4 = var1 + var2 + var3)
#(a) Since var4 is a combination of vars 1-3, I suspect that the expected value
#    of var4 should be at 4. This is because E[var1]=mean_var1, and since var4 = var1 + var2 + var3,
#    E[var4] = E[var1 + var2 + var3] = E[var1] + E[var2] + E[var3] = 3 + (-1) + 2 = 4
#(b) Creates the var4 density plot with expected value line
dens4 <- ggplot(data=random.draws, aes(x=var4)) +
geom_density(fill="#1ef1a3",color="#1ef1a3") +
labs(x="Var4",
title ="Density Plot of Var4") +
geom_vline(xintercept = 4, linetype="dashed")
# Displays the plot
dens4
var1 <- rnorm(250,mean=3,sd=sqrt(1))
var2 <- rnorm(250,mean=-1,sd=sqrt(2))
var3 <- rnorm(250,mean=2,sd=sqrt(3))
# Creates the id variable for later use
id <- 1:250
# Creates the 'random.draws' data frame by combining the vectors var1, var2, and var3
random.draws <- data.frame(id,var1,var2,var3)
View(random.draws)
scatter <- ggplot(data=random.draws, aes(x=id,y=var1)) +
geom_point() +
labs(x="Draw",
y= "Var1",
title ="Scatter Plot of Var1")
# Displays the plot
scatter
dens <- ggplot(data=random.draws, aes(x=var2)) +
geom_density(fill="#ff38fc",color="#ff38fc") +
labs(x="Var2",
title ="Density Plot of Var2")
# Displays the plot
dens
random.draws <- random.draws %>% mutate(var4 = var1 + var2 + var3)
#(a) Since var4 is a combination of vars 1-3, I suspect that the expected value
#    of var4 should be at 4. This is because E[var1]=mean_var1, and since var4 = var1 + var2 + var3,
#    E[var4] = E[var1 + var2 + var3] = E[var1] + E[var2] + E[var3] = 3 + (-1) + 2 = 4
#(b) Creates the var4 density plot with expected value line
dens4 <- ggplot(data=random.draws, aes(x=var4)) +
geom_density(fill="#1ef1a3",color="#1ef1a3") +
labs(x="Var4",
title ="Density Plot of Var4") +
geom_vline(xintercept = 4, linetype="dashed")
# Displays the plot
dens4
sqrt(9)
#(c) Creates the density plot as well as a dashed vertical line at the expected value
#    of var5 (0.5)
dens5 <- ggplot(data=random.draws, aes(x=var5)) +
geom_density(fill="#b7b115",color="#b7b115") +
labs(x="Var5",
title ="Density Plot of Var5") +
geom_vline(xintercept = 0.5, linetype="dashed")
# Displays the plot
dens5
# instructions for this exercise.
random.draws <- random.draws %>% mutate(var5 = (var3 - 1)/2)
#(a) I expect that the new density plot will be centered around x=0.5. This represents
#    the expected value of var5, which is E[(var3 - 1)/2]=0.5
#(b) Since we are making the values of all terms half their original size I expect
#    that there will be tighter distribution around the mean (variance5 < variance3)
#(c) Creates the density plot as well as a dashed vertical line at the expected value
#    of var5 (0.5)
dens5 <- ggplot(data=random.draws, aes(x=var5)) +
geom_density(fill="#b7b115",color="#b7b115") +
labs(x="Var5",
title ="Density Plot of Var5") +
geom_vline(xintercept = 0.5, linetype="dashed")
# Displays the plot
dens5
